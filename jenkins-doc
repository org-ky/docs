-------------------------------------------- JENKINS ----------------------------------------------

###### Install Jenkins
https://www.youtube.com/watch?v=pMO26j2OUME

Creato utente "admin" con mail "kyko2323@gmail.com"

L’interfaccia presenta la sezione di controllo sulla spalla sinistra e un riassunto degli ultimi job eseguiti.

La configurazione avviene mediante il menu Manage Jenkins. 
Volendosi limitare ad una configurazione semplice, oltre alla configurazione degli utenti e dei loro privilegi, 
che ci sentiamo di consigliare caldamente, vanno configurati solo i seguenti parametri:

  1. # of executors, ovvero il numero di job eseguibili contemporaneamente nel nodo, il valore di default è 2,
  2. Jenkins Location: è l’URL pubblica di Jenkins stesso e l’indirizzo email dell’amministratore di Jenkins

Una configurazione più avanzata permette di abilitare una delle caratteristiche maggiormente apprezzate di Jenkins: 
il parallelismo su più macchine. 
È possibile infatti installare Jenkins su più nodi (detti slave) di una rete; tutti gli slave vengono coordinati 
dall’unico nodo master, il quale distribuisce il carico di lavoro tra i vari slave per ottimizzare la velocità 
di esecuzione dei job. 
È questa una caratteristica particolarmente apprezzata in quei progetti in generale molto grandi o con un elevato 
numero di test automatici da effettuare.

###### Restart Jenkins
http://localhost:8080/safeRestart

###### Triggers Jenkins build
https://youtu.be/CmwTPxdx24Y

###### Build jar file with Maven

###### Build a WAR file with Maven and Deploy it to a remote container
1. Create a new freestyle project
2. Config the source project from git repository
3. Create build stage with "Invoke top-level Maven targets" and "Package" as goal
4. Create Post-build stage with "Deploy war/ear to a container":
   - Choose "**/*.war" as file types
   - Choose context path of the project
   - Add credential in Jenkins to connect to remote tomcat (credentials are setted
     in "TOMCAT_HOME/conf/tomcat-users.xml")
     If Jenkins gets error "The username you provided is not allowed to use the text-based     	
     Tomcat Manager (error 403) when deploying on remote Tomcat" edit the file at 	      	    
     "TOMCAT_HOME/webapps/manager/META-INF/context.xml" and comment the "Valve" attribute
   - Choose the URL of Tomcat

###### Build a WAR file with Maven and Deploy it to a remote container using GitHub Hook
1. Create a new freestyle project
2. Config the source project from git repository
3. Create build stage with "Invoke top-level Maven targets" and "Package" as goal
4. Create Post-build stage with "Deploy war/ear to a container":
   - Choose "**/*.war" as file types
   - Choose context path of the project
   - Add credential in Jenkins to connect to remote tomcat (credentials are setted
     in "TOMCAT_HOME/conf/tomcat-users.xml")
     If Jenkins gets error "The username you provided is not allowed to use the text-based     	
     Tomcat Manager (error 403) when deploying on remote Tomcat" edit the file at 	      	    
     "TOMCAT_HOME/webapps/manager/META-INF/context.xml" and comment the "Valve" attribute
   - Choose the URL of Tomcat
   - Login to: https://my.webhookrelay.com/ with "admin, pwd9" and verified that a Token is created
     with Key: 6bc4eead-2953-43e1-abb0-d85af7f391dd and  Secret: 8IlajJRNUOTi
   - From command line login and run Relay service:
        - relay login -k 6bc4eead-2953-43e1-abb0-d85af7f391dd -s 8IlajJRNUOTi
        - relay forward --bucket github-jenkins http://localhost:8080/github-webhook/
   - In GitHub repository go in Setting->Webhook and create a Hook with the forwarding
     Url "https://yhby8rxwxynitc4aosx71c.hooks.webhookrelay.com" provided from Relay forward command
   - In Build Trigger of Jenkins job section use "GitHub hook trigger for GITScm polling"
   
###### Create Multibranch Pipeline with Git
https://www.youtube.com/watch?v=tuxO7ZXplRE

"Freestyle project" is used for simple, single tasks (e.g. run tests).
"Pipeline" is used for whole delivery cycle (e.g. test | build | ...).
In a normal "pipeline", the jobs are executed in sequence and for a single branch. 
In a "multi-branch pipeline", the jobs are executed in parallel on more branches.

I Job di Jenkins

Il punto di forza di Jenkins è la creazione di un job, che non è null’altro se non una serie di operazioni da effettuare in sequenza e di cui monitorare l’output.

Le fasi tipiche di un job sono ovviamente i passi tipici del lavoro di build di un’applicazione:

- Check-out del codice sorgente da un CVS (Subversion, Git, etc…)

- Build steps

- Post-build steps

Un tipico job orientato alla CI, verifica periodicamente se ci sono dei nuovi commit su un particolare repository; in caso positivo effettua, nell’ordine indicato i passi descritti nella sezione di build (tipicamente una compilazione, esecuzione dei test automatici e creazione degli artefatti) e quindi, nel caso in cui la fase di build sia terminata con esito positivo, esegue le azioni indicate nella fase di post-build (tipicamente l’invio di una notifica agli sviluppatori con i risultati dei test, l’archiviazione degli artefatti su un repository, il deploy in ambiente di test e/o esercizio).

###### Jenkinsfile
https://youtu.be/MY1w7sWW5ms
https://www.youtube.com/watch?v=7KCS70sCoK0


   

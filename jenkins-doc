-------------------------------------------- JENKINS ----------------------------------------------

Jenkins è uno strumento di integrazione continua open source e rappresenta uno dei principali strumenti di automazione di compiti. 
Esso permette agli utenti, tramite la definizione di project (in passato definiti jobs) di automatizzare una serie complessa di compiti, quali
ad esempio la compilazione di una componente software a partire dal suo codice sorgente, l’esecuzione dei test e la visualizzazione dei loro risultati e il deploy dell’artefatto 
ottenuto verso un dei prodotti.
Jenkins è facilmente installabile e configurabile ed è funzionante “out of the box” senza particolari impostazioni; presenta un ricco ecosistema di plugin messi a disposizione 
dalla comunità ed è estensibile, tramite questi ultimi, qualora le funzionalità desiderate non fossero già disponibili.
Jenkins si basa su un’architettura master-slave, dove un’istanza principale (il master) coordina i vari compiti tra uno o più slave, i quali rappresentano dei meri esecutori dei 
lavori a loro assegnati.

###### Install Jenkins
https://www.youtube.com/watch?v=pMO26j2OUME

Creato utente "admin" con mail "kyko2323@gmail.com"

L’interfaccia presenta la sezione di controllo sulla spalla sinistra e un riassunto degli ultimi job eseguiti.

La configurazione avviene mediante il menu Manage Jenkins. Volendosi limitare ad una configurazione semplice, oltre alla configurazione degli utenti e dei loro privilegi, che ci sentiamo di consigliare caldamente, vanno configurati solo i seguenti parametri:

    # of executors, ovvero il numero di job eseguibili contemporaneamente nel nodo, il valore di default è 2,
    Jenkins Location: è l’URL pubblica di Jenkins stesso e l’indirizzo email dell’amministratore di Jenkins

Una configurazione più avanzata permette di abilitare una delle caratteristiche maggiormente apprezzate di Jenkins: il parallelismo su più macchine. 
È possibile infatti installare Jenkins su più nodi (detti slave) di una rete; tutti gli slave vengono coordinati dall’unico nodo master, il quale distribuisce il carico di lavoro tra i vari slave per ottimizzare la velocità di esecuzione dei job. 
È questa una caratteristica particolarmente apprezzata in quei progetti in generale molto grandi o con un elevato numero di test automatici da effettuare.

###### Create Multibranch Pipeline with Git
https://www.youtube.com/watch?v=tuxO7ZXplRE

In a normal "pipeline", the jobs are executed in sequence. 
In a "multi-branch pipeline", the jobs are executed in parallel.

I Job di Jenkins

Il punto di forza di Jenkins è la creazione di un job, che non è null’altro se non una serie di operazioni da effettuare in sequenza e di cui monitorare l’output.

Le fasi tipiche di un job sono ovviamente i passi tipici del lavoro di build di un’applicazione:

- Check-out del codice sorgente da un CVS (Subversion, Git, etc…)

- Build steps

- Post-build steps

Un tipico job orientato alla CI, verifica periodicamente se ci sono dei nuovi commit su un particolare repository; in caso positivo effettua, nell’ordine indicato i passi descritti nella sezione di build (tipicamente una compilazione, esecuzione dei test automatici e creazione degli artefatti) e quindi, nel caso in cui la fase di build sia terminata con esito positivo, esegue le azioni indicate nella fase di post-build (tipicamente l’invio di una notifica agli sviluppatori con i risultati dei test, l’archiviazione degli artefatti su un repository, il deploy in ambiente di test e/o esercizio).

###### Jenkinsfile
https://youtu.be/MY1w7sWW5ms

###### Triggers Jenkins build
https://youtu.be/CmwTPxdx24Y

###### Build jar file with Maven
https://www.bogotobogo.com/DevOps/Jenkins/Jenkins_GitHub_Java_Application_Project_Build_Configuration_Maven.php

First of all, create a Jenkins Freestyle Project.

TZ=Asia/Kolkata
0 */1 * * *

Please add the above code in Build periodically box. It will run your code once an hour. For creating the jar file,

cd '<your project location in the disk>'
mvn clean install

Now this will build your jar file. To run the jar file,

cd 'target'
java -jar <project jar file name>.jar

So total script will be like :

cd '<your project location in the disk>'
mvn clean install
cd 'target'
java -jar <project jar file name>.jar

Add the above code to Execute shell block in Build -> Add build step -> Execute shell in the job configuration. Hope this is what you are looking for.
